import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: WaterTrackerPage(),
    );
  }
}

class WaterTrackerPage extends StatefulWidget {
  const WaterTrackerPage({super.key});

  @override
  _WaterTrackerPageState createState() => _WaterTrackerPageState();
}

class _WaterTrackerPageState extends State<WaterTrackerPage> {
  List<int> waterIntake = [];
  int dailyGoal = 2000; // –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö
  final TextEditingController goalController = TextEditingController();

  int get totalIntake => waterIntake.fold(0, (sum, item) => sum + item);

  double get progress => totalIntake / dailyGoal;

  void addWater(int amount) {
    setState(() {
      waterIntake.add(amount);
    });
  }

  void removeLast() {
    if (waterIntake.isNotEmpty) {
      setState(() {
        waterIntake.removeLast();
      });
    }
  }

  void updateGoal() {
    final input = int.tryParse(goalController.text);
    if (input != null && input > 0) {
      setState(() {
        dailyGoal = input;
        waterIntake.clear(); // –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ü–µ–ª–∏
      });
    }
  }

  String get statusMessage {
    if (progress >= 1.0) {
      return "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏!";
    } else if (progress < 0.5) {
      return "üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã!";
    } else {
      return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
    }
  }

  @override
  void dispose() {
    goalController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–°—á—ë—Ç—á–∏–∫ –≤–æ–¥—ã'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–¶–µ–ª—å: ${dailyGoal} –º–ª',
              style: const TextStyle(fontSize: 18),
            ),
            const SizedBox(height: 10),
            LinearProgressIndicator(
              value: progress > 1.0 ? 1.0 : progress,
              minHeight: 20,
              backgroundColor: Colors.grey[300],
              valueColor: AlwaysStoppedAnimation<Color>(
                progress >= 1.0 ? Colors.green : Colors.blue,
              ),
            ),
            const SizedBox(height: 10),
            Text(
              '–í—ã –≤—ã–ø–∏–ª–∏: $totalIntake / $dailyGoal –º–ª',
              style: const TextStyle(fontSize: 18),
            ),
            const SizedBox(height: 10),
            Text(
              statusMessage,
              style: const TextStyle(fontSize: 16, color: Colors.black54),
            ),
            const SizedBox(height: 20),
            Wrap(
              spacing: 10,
              children: [
                ElevatedButton(
                  onPressed: () => addWater(200),
                  child: const Text('–î–æ–±–∞–≤–∏—Ç—å 200 –º–ª'),
                ),
                ElevatedButton(
                  onPressed: () => addWater(500),
                  child: const Text('–î–æ–±–∞–≤–∏—Ç—å 500 –º–ª'),
                ),
                ElevatedButton(
                  onPressed: removeLast,
                  child: const Text('–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π'),
                ),
              ],
            ),
            const SizedBox(height: 20),
            const Text(
              '–ò—Å—Ç–æ—Ä–∏—è:',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: waterIntake.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text('${waterIntake[index]} –º–ª'),
                  );
                },
              ),
            ),
            const Divider(),
            const Text(
              '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏:',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: goalController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      hintText: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –≤ –º–ª',
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: updateGoal,
                  child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
